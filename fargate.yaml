AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ContainerPort:
    Type: Number
    Default: 80
    Description: Port number of docker container
  TaskCPU:
    Type: String
    Default: 1024
    Description: Number of CPU units used by the task
  TaskMemory:
    Type: String
    Default: 2GB
    Description: Amount of memory used by the task
Resources:
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for accessing ELB
      VpcId: !ImportValue infrastructure-vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  ContainerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for accessing Container
      VpcId: !ImportValue infrastructure-vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSG         
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - ecs-tasks.amazonaws.com
          Action: 
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: DevTestTask 
      Cpu: !Ref TaskCPU
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: DevTestContainer
          Image: richarvey/nginx-php-fpm
          PortMappings:
            - ContainerPort: !Ref ContainerPort
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
  Cluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: DevTestCluster
  Service:
    Type: "AWS::ECS::Service"
    Properties:
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      Cluster: !Ref Cluster
      ServiceName: DevTestService
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - !Ref ContainerSG
          AssignPublicIp: DISABLED
          Subnets: 
            - !ImportValue infrastructure-subnetprivate
      LoadBalancers:
        - ContainerName: DevTestContainer
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref 'TargetGroup'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '50'
      Subnets: 
        - !ImportValue infrastructure-subnetpublic1
        - !ImportValue infrastructure-subnetpublic2
      SecurityGroups: 
        - !Ref LoadBalancerSG
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: DevTestContainer
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue infrastructure-vpc
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP
Outputs:
  Url:
    Description: URL for accessing the website
    Value: !Join ['', ['http://', !GetAtt 'LoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'Url' ] ]