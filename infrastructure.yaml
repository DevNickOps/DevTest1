AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  VPCCIDR:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.0.0.0/16
  SubnetPublic1CIDR:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.0.0.0/24
  SubnetPublic2CIDR:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.0.2.0/24
  SubnetPrivateCIDR:
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.0.1.0/24

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
  SubnetPublic1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: !Ref SubnetPublic1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  SubnetPublic2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: !Ref SubnetPublic2CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  SubnetPrivate:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Ref SubnetPrivateCIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
  IGW:
    Type: "AWS::EC2::InternetGateway"
  GatewayAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC  
  EIPNatGW:
    DependsOn: GatewayAttach
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIPNatGW.AllocationId
      SubnetId: !Ref SubnetPublic1
  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  RouteTablePrivate:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
  RoutePublic:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RouteTablePublic
  RoutePrivate:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref RouteTablePrivate
  SubnetRouteTableAssociatePublic1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic1
  SubnetRouteTableAssociatePublic2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic2
  SubnetRouteTableAssociatePrivate:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivate

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref 'VPC'
    Export:
      Name: infrastructure-vpc
  SubnetPublicOne:
    Description: Public subnet one
    Value: !Ref 'SubnetPublic1'
    Export:
      Name: infrastructure-subnetpublic1
  SubnetPublicTwo:
    Description: Public subnet two
    Value: !Ref 'SubnetPublic2'
    Export:
      Name: infrastructure-subnetpublic2
  SubnetPrivate:
    Description: Public subnet one
    Value: !Ref 'SubnetPrivate'
    Export:
      Name: infrastructure-subnetprivate